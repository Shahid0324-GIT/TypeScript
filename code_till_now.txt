typescript commands:
    tsc -w will compile all the ts files in the directory unless mentioned to skip other directories otherwise.

let myName: string;
let num: number;
let isLoading: boolean;
let album: any;

myName = "John Doe";
num = 42;
isLoading = false;
album = 1984;

const sum = (a: number, b: number) => {
  return a + b;
};

let postId: number | string;
let isActive: number | boolean;

let re = /\w+/g;

let stringArray = ["Hey", "Hi", "Hello"];
let numstrArray = ["Amigo", "Friend", 1];
let mixedData = ["EVH", 1984, true];

//  Tuple:
let myTuple: [string, number, boolean] = ["John Doe", 42, true];
let myArr = ["Jane Doe", 24, false];

// Objects

type Person = {
  name: string;
  age?: number;
  employed: boolean;
  albums: (string | number)[];
};

let person1: Person = {
  name: "John Doe",
  age: 29,
  employed: true,
  albums: ["Gala", 1984, "Enigma", 2011],
};

let person2: Person = {
  name: "Jane Doe",
  employed: true,
  albums: ["Gala", 1984, "Enigma", 2011],
};

person2 = person1; // Possible

const greetPerson = (person: Person) => {
  return `Hello ${person.name}`;
};

console.log(greetPerson(person1));

interface Employee {
  name: string;
  id: string | number;
  salary: number;
  designation: string;
  role: string;
  hobbies?: string[];
  achievements?: (string | number)[];
}

let employee1: Employee = {
  name: "John Doe",
  id: 1,
  salary: 1200000,
  designation: "Software Engineer",
  role: "Frontend Developer",
};

const greetEmployee = (employee: Employee) => {
  return `Hello ${employee.name}`;
};

console.log(greetEmployee(employee1));

// Enums: Enums are not a type-level addition to JS but something added to the language and runtime

enum Grade {
  U = 1,
  D,
  C,
  B,
  A,
}

console.log(Grade.A);

// Type Aliases: It is used to assign a type to variable which can be used anywhere in the code and which makes the code more modular.

type stringOrNumber = string | number;

type stringOrNumberArr = (string | number)[];

type Employee = {
  id: stringOrNumber;
  name: string;
  age?: number;
  isCEO: boolean;
  hobbies: stringOrNumberArr;
};

type UserId = stringOrNumber;

// Literal Types: Is used to define a constant value which cannot be changed => const name = 'Constant';

let myName: "John Doe";
let userName: "John Doe" | "Jane Doe" | "Sam Doe";

// Void functions: A function without a "return statement"

// A normal function

// type mathFunction = (a: number, b: number) => number;
interface mathFunction {
  (a: number, b: number): number;
}

const add: mathFunction = (a, b) => {
  return a + b;
};

let sub: mathFunction = function (a, b) {
  return Math.abs(a - b);
};

function multiply(a: number, b: number): number {
  return Math.abs(a * b);
}

const divide: mathFunction = (a, b) => {
  return Math.ceil(a / b);
};

// Void Function

const v = (message: any): void => {
  console.log(message);
};

console.log(add(24, 18));
console.log(sub(24, -18));
console.log(multiply(-24, 18));
console.log(divide(24, 18));
console.log(sub(-24, 18));

v("Hello World!");
v(123);
v(true);
v({
  name: "Jane Doe",
});

// Optional Parameters: Any parameter which is optional must be passed as the last argument.

const addAll = (a: number, b: number, c?: number): number => {
  if (c) {
    return a + b + c;
  }

  return a + b;
};

// Default Parameter

const multiplyAll = (a: number, b: number, c: number = 42): number => {
  return a * b * c;
};

const subAll = (a: number = 10, b: number, c: number = 2): number => {
  return a + b - c;
};

// Rest Parameter
const total = (a: number, b: number, c: number, ...nums: number[]): number => {
  console.log(a, b, c, nums);
  return a * b * c + nums.reduce((curr, acc) => curr + acc, 0);
};

v(multiplyAll(4, 5, 6));
v(multiplyAll(4, 5));
v(addAll(1, 2, 3));
v(addAll(1, 2));
v(subAll(undefined, 5));
v(total(1, 2, 3, 4, 5, 6, 7, 8, 9));

// Never Type: Functions which throw error are of "never" type or have a infinit loop

// Error function
const createError = (msg: string) => {
  throw new Error(msg);
};

// Infinite loop

const infinite = () => {
  let i = 0;
  while (true) {
    i++;
    if (i > 10) {
      break;
    }
  }
};

const addOrConcat = (a: number, b: number, c: "add" | "concat") => {
  if (c === "add") return a + b;
  return "" + a + b;
};

const myVal: number = addOrConcat(2, 2, "add") as number;
const myStr: string = addOrConcat(2, 2, "concat") as string;

const problemWithTypeCasting: number = addOrConcat(2, 2, "concat") as number;

// Double casting or forced casting | Avoid it as much as possible
// (10 as unknown) as string // Here we are converting the number to unknown type and asserting that number as a string which is like calling a white rice "Biryani"

// Use of assertion is mostly done in manupulating DOM objects

// const img = document.querySelector("img"); // Here TS can infer that this is an img element and also null.

// const img1 = document.getElementById("#myID"); // Here TS can infer that this is an HTML element but it is not inferring it as an img element and also null.

// const img2 = document.getElementById("#img"); // Here also TS can infer that this is an HTML element but it is not inferring it as an img element and also null.

// Now to overwrite the TS infernece, TS assertion or casting is used.

const img = document.querySelector("img") as HTMLImageElement; // Here the type assertion is used to convert the DOM object explicitly to img element => const img: HTMLImageElements

const img1 = document.getElementById("#img") as HTMLImageElement;

// "!" is used to explicitly tell TS that this element is not a null type
const img2 = document.querySelector("img")!;

const img3 = <HTMLImageElement>document.querySelector("img"); // Other way to write assertion
